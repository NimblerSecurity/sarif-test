{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0-rtm.5.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "NightVision",
          "version": "0.1.0",
          "informationUri": "https://app.nightvision.net/scans/e4072980-6c8d-4b07-a3fe-2e2031059b40/issues",
          "rules": [
            {
              "id": "a804fc30-8fde-4a15-bd70-b035d01cd650-SQL Injection - PostgreSQL",
              "name": "a804fc30-8fde-4a15-bd70-b035d01cd650-SQL Injection - PostgreSQL",
              "shortDescription": {
                "text": "SQL Injection - PostgreSQL"
              },
              "fullDescription": {
                "text": "üö® **Exploitable Vulnerability Found** üö®\n‚ÑπÔ∏è The /search URL path is vulnerable to **SQL Injection - PostgreSQL** via a `POST` request. The application declared the /search endpoint in the file `src/main/java/hawk/controller/SearchController.java` on **line `36`**\n**Description**: This is a SQL Injection - PostgreSQL vulnerability on the `searchText` request parameter with the payload `'`. This payload was submitted in the `searchText` parameter within a POST request. The application responded with an `org.postgresql.util.PSQLException` which indicates that the application is vulnerable to SQL Injection. This proof-of-concept attack demonstrates that it is possible to inject arbitrary SQL into the application's response. If an attacker can control a query that is executed in the application's database, then the attacker could use this access to read, modify, or delete data from the database. Furthermore, the attacker could use this access to gain further access to the application or the underlying system.\nüîç For more information see the issue on **NightVision** here: https://api.nightvision.net/api/v1/scan/e4072980-6c8d-4b07-a3fe-2e2031059b40/"
              },
              "helpUri": "https://docs.nightvision.net",
              "help": {
                "text": "üö® **Exploitable Vulnerability Found** üö®\n‚ÑπÔ∏è The /search URL path is vulnerable to **SQL Injection - PostgreSQL** via a `POST` request. The application declared the /search endpoint in the file `src/main/java/hawk/controller/SearchController.java` on **line `36`**\n**Description**: This is a SQL Injection - PostgreSQL vulnerability on the `searchText` request parameter with the payload `'`. This payload was submitted in the `searchText` parameter within a POST request. The application responded with an `org.postgresql.util.PSQLException` which indicates that the application is vulnerable to SQL Injection. This proof-of-concept attack demonstrates that it is possible to inject arbitrary SQL into the application's response. If an attacker can control a query that is executed in the application's database, then the attacker could use this access to read, modify, or delete data from the database. Furthermore, the attacker could use this access to gain further access to the application or the underlying system.\nüîç For more information see the issue on **NightVision** here: https://api.nightvision.net/api/v1/scan/e4072980-6c8d-4b07-a3fe-2e2031059b40/"
              }
            },
            {
              "id": "a26e0fbf-bbb1-4380-9301-d465563b8ac0-Spring4Shell",
              "name": "a26e0fbf-bbb1-4380-9301-d465563b8ac0-Spring4Shell",
              "shortDescription": {
                "text": "Spring4Shell"
              },
              "fullDescription": {
                "text": "üö® **Exploitable Vulnerability Found** üö®\n‚ÑπÔ∏è The /search URL path is vulnerable to **Spring4Shell** via a `POST` request. The application declared the /search endpoint in the file `src/main/java/hawk/controller/SearchController.java` on **line `36`**\n**Description**: This proof-of-concept attack demonstrates a **Spring4Shell** vulnerability. The attack was performed using a **POST** request to the `/search` endpoint on `127.0.0.1:9000`. The payload `class.module.classLoader.DefaultAssertionStatus=nonsense` was sent in the request body. This payload is a specially crafted string that can be used to execute arbitrary code on the target application. The application responded with an HTTP 400 status code, which indicates that the payload was accepted and the code was executed. \n\nThis vulnerability can be used to execute arbitrary code on the target system, which can be used to gain access to sensitive data, modify data, or cause a denial of service.\nüîç For more information see the issue on **NightVision** here: https://api.nightvision.net/api/v1/scan/e4072980-6c8d-4b07-a3fe-2e2031059b40/"
              },
              "helpUri": "https://docs.nightvision.net",
              "help": {
                "text": "üö® **Exploitable Vulnerability Found** üö®\n‚ÑπÔ∏è The /search URL path is vulnerable to **Spring4Shell** via a `POST` request. The application declared the /search endpoint in the file `src/main/java/hawk/controller/SearchController.java` on **line `36`**\n**Description**: This proof-of-concept attack demonstrates a **Spring4Shell** vulnerability. The attack was performed using a **POST** request to the `/search` endpoint on `127.0.0.1:9000`. The payload `class.module.classLoader.DefaultAssertionStatus=nonsense` was sent in the request body. This payload is a specially crafted string that can be used to execute arbitrary code on the target application. The application responded with an HTTP 400 status code, which indicates that the payload was accepted and the code was executed. \n\nThis vulnerability can be used to execute arbitrary code on the target system, which can be used to gain access to sensitive data, modify data, or cause a denial of service.\nüîç For more information see the issue on **NightVision** here: https://api.nightvision.net/api/v1/scan/e4072980-6c8d-4b07-a3fe-2e2031059b40/"
              }
            },
            {
              "id": "100ac83b-cf23-4b35-9def-47e06e63b63a-Parameter Tampering",
              "name": "100ac83b-cf23-4b35-9def-47e06e63b63a-Parameter Tampering",
              "shortDescription": {
                "text": "Parameter Tampering"
              },
              "fullDescription": {
                "text": "üö® **Exploitable Vulnerability Found** üö®\n‚ÑπÔ∏è The /search URL path is vulnerable to **Parameter Tampering** via a `POST` request. The application declared the /search endpoint in the file `src/main/java/hawk/controller/SearchController.java` on **line `36`**\n**Description**: This proof-of-concept attack demonstrates a Parameter Tampering vulnerability. The `POST` request was sent to `127.0.0.1:9000/search` with the parameter `searchText` containing the payload `\\u0000`. This payload was echoed unmodified in the application's response. \n\nParameter Tampering is a type of attack where an attacker modifies the value of a parameter in an HTTP request in order to gain access to protected resources, or to manipulate the application's behavior. In this case, an attacker was able to inject the `\\u0000` payload into the `searchText` parameter, and the application echoed the payload unmodified in the response. \n\nThis type of attack can allow an attacker to access protected resources, or to manipulate the application's behavior. For example, an attacker could use this vulnerability to bypass authentication or authorization checks, or to gain access to sensitive data. In addition, an attacker could use this vulnerability to perform a denial-of-service attack, or to gain access to the application's underlying system.\nüîç For more information see the issue on **NightVision** here: https://api.nightvision.net/api/v1/scan/e4072980-6c8d-4b07-a3fe-2e2031059b40/"
              },
              "helpUri": "https://docs.nightvision.net",
              "help": {
                "text": "üö® **Exploitable Vulnerability Found** üö®\n‚ÑπÔ∏è The /search URL path is vulnerable to **Parameter Tampering** via a `POST` request. The application declared the /search endpoint in the file `src/main/java/hawk/controller/SearchController.java` on **line `36`**\n**Description**: This proof-of-concept attack demonstrates a Parameter Tampering vulnerability. The `POST` request was sent to `127.0.0.1:9000/search` with the parameter `searchText` containing the payload `\\u0000`. This payload was echoed unmodified in the application's response. \n\nParameter Tampering is a type of attack where an attacker modifies the value of a parameter in an HTTP request in order to gain access to protected resources, or to manipulate the application's behavior. In this case, an attacker was able to inject the `\\u0000` payload into the `searchText` parameter, and the application echoed the payload unmodified in the response. \n\nThis type of attack can allow an attacker to access protected resources, or to manipulate the application's behavior. For example, an attacker could use this vulnerability to bypass authentication or authorization checks, or to gain access to sensitive data. In addition, an attacker could use this vulnerability to perform a denial-of-service attack, or to gain access to the application's underlying system.\nüîç For more information see the issue on **NightVision** here: https://api.nightvision.net/api/v1/scan/e4072980-6c8d-4b07-a3fe-2e2031059b40/"
              }
            },
            {
              "id": "ef077226-ac09-43ee-827f-b29d5122b0f9-Cross Site Scripting (Reflected)",
              "name": "ef077226-ac09-43ee-827f-b29d5122b0f9-Cross Site Scripting (Reflected)",
              "shortDescription": {
                "text": "Cross Site Scripting (Reflected)"
              },
              "fullDescription": {
                "text": "üö® **Exploitable Vulnerability Found** üö®\n‚ÑπÔ∏è The /search URL path is vulnerable to **Cross Site Scripting (Reflected)** via a `POST` request. The application declared the /search endpoint in the file `src/main/java/hawk/controller/SearchController.java` on **line `36`**\n**Description**: This is a Cross Site Scripting (Reflected) vulnerability on the `searchText` parameter with the payload `\"\u003e\u003cscrIpt\u003ealert(1);\u003c/scRipt\u003e`. The payload was submitted in the `searchText` parameter as part of a `POST` request to the `/search` endpoint on the `127.0.0.1:9000` domain. This input was echoed unmodified in the application's response, as evidenced by the string `\"\u003e\u003cscrIpt\u003ealert(1);\u003c/scRipt\u003e`. This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. If an attacker can control a script that is executed in the victim's browser, then the attacker could use this access to steal cookies, perform phishing attacks, or perform other malicious actions.\nüîç For more information see the issue on **NightVision** here: https://api.nightvision.net/api/v1/scan/e4072980-6c8d-4b07-a3fe-2e2031059b40/"
              },
              "helpUri": "https://docs.nightvision.net",
              "help": {
                "text": "üö® **Exploitable Vulnerability Found** üö®\n‚ÑπÔ∏è The /search URL path is vulnerable to **Cross Site Scripting (Reflected)** via a `POST` request. The application declared the /search endpoint in the file `src/main/java/hawk/controller/SearchController.java` on **line `36`**\n**Description**: This is a Cross Site Scripting (Reflected) vulnerability on the `searchText` parameter with the payload `\"\u003e\u003cscrIpt\u003ealert(1);\u003c/scRipt\u003e`. The payload was submitted in the `searchText` parameter as part of a `POST` request to the `/search` endpoint on the `127.0.0.1:9000` domain. This input was echoed unmodified in the application's response, as evidenced by the string `\"\u003e\u003cscrIpt\u003ealert(1);\u003c/scRipt\u003e`. This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. If an attacker can control a script that is executed in the victim's browser, then the attacker could use this access to steal cookies, perform phishing attacks, or perform other malicious actions.\nüîç For more information see the issue on **NightVision** here: https://api.nightvision.net/api/v1/scan/e4072980-6c8d-4b07-a3fe-2e2031059b40/"
              }
            }
          ]
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "https://app.nightvision.net/scans/e4072980-6c8d-4b07-a3fe-2e2031059b40/issues"
          },
          "length": -1
        }
      ],
      "results": [
        {
          "ruleId": "a804fc30-8fde-4a15-bd70-b035d01cd650-SQL Injection - PostgreSQL",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "SQL Injection - PostgreSQL"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/hawk/controller/SearchController.java"
                },
                "region": {
                  "startLine": 36,
                  "message": {
                    "text": "Found on endpoint /search"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "nightvisionIssueID/v1": "a804fc30-8fde-4a15-bd70-b035d01cd650"
          },
          "baselineState": "new",
          "rank": 100,
          "properties": {
            "nightvision-confidence": "Medium",
            "nightvision-risk": "High",
            "security-severity": "8.0"
          }
        },
        {
          "ruleId": "a26e0fbf-bbb1-4380-9301-d465563b8ac0-Spring4Shell",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Spring4Shell"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/hawk/controller/SearchController.java"
                },
                "region": {
                  "startLine": 36,
                  "message": {
                    "text": "Found on endpoint /search"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "nightvisionIssueID/v1": "a26e0fbf-bbb1-4380-9301-d465563b8ac0"
          },
          "baselineState": "new",
          "rank": 100,
          "properties": {
            "nightvision-confidence": "Medium",
            "nightvision-risk": "High",
            "security-severity": "8.0"
          }
        },
        {
          "ruleId": "100ac83b-cf23-4b35-9def-47e06e63b63a-Parameter Tampering",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter Tampering"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/hawk/controller/SearchController.java"
                },
                "region": {
                  "startLine": 36,
                  "message": {
                    "text": "Found on endpoint /search"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "nightvisionIssueID/v1": "100ac83b-cf23-4b35-9def-47e06e63b63a"
          },
          "baselineState": "new",
          "rank": 100,
          "properties": {
            "nightvision-confidence": "Medium",
            "nightvision-risk": "Medium",
            "security-severity": "5.0"
          }
        },
        {
          "ruleId": "ef077226-ac09-43ee-827f-b29d5122b0f9-Cross Site Scripting (Reflected)",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Cross Site Scripting (Reflected)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/hawk/controller/SearchController.java"
                },
                "region": {
                  "startLine": 36,
                  "message": {
                    "text": "Found on endpoint /search"
                  }
                }
              }
            }
          ],
          "partialFingerprints": {
            "nightvisionIssueID/v1": "ef077226-ac09-43ee-827f-b29d5122b0f9"
          },
          "baselineState": "new",
          "rank": 100,
          "properties": {
            "nightvision-confidence": "Medium",
            "nightvision-risk": "High",
            "security-severity": "8.0"
          }
        }
      ]
    }
  ]
}